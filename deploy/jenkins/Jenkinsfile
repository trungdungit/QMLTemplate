pipeline {
    agent none
    stages {
        parellel {
            stage('Linux Debug') {
                environment {
                    CCACHE_BASEDIR = "${env.WORKSPACE}"
                    QT_CONFIG = 'debug'
                    QMAKE_VER = "5.15.2/gcc_64/bin/qmake"
                }
                steps {
                    sh 'export'
                    sh 'git submodule deinit -f .'
                    sh 'git clean -ff -x -d .'
                    sh 'git submodule update --init --recursive --force'
                    sh 'mkdir build; cd build; ${QT_PATH}/${QMAKE_VER} -r ${WORKSPACE}/TemplateProject.pro CONFIG+=${QT_CONFIG} CONFIG+=WarningsAsErrorsOn'
                    sh 'cd build; make -j`nproc --all`'
                }
                post {
                    cleanup {
                        sh 'git clean -ff -x -d .'
                    }
                }
            }

            stage('Linux Debug (cmake)') {
                environment {
                    CCACHE_BASEDIR = "${env.WORKSPACE}"
                    CMAKE_BUILD_TYPE = 'Debug'
                    QT_VERSION = "5.15.2"
                    QT_MKSPEC = "gcc_64"
                }
                steps {
                    sh 'export'
                    sh 'git submodule deinit -f .'
                    sh 'git clean -ff -x -d .'
                    sh 'git submodule update --init --recursive --force'
                    sh 'mkdir build; cd build; cmake .. -DCMAKE_BUILD_TYPE=Debug'
                    sh 'cd build; make -j`nproc --all`'
                }
                post {
                    cleanup {
                        sh 'git clean -ff -x -d .'
                    }
                }
            }

            stage('Linux Test (cmake)') {
                environment {
                    CCACHE_BASEDIR = "${env.WORKSPACE}"
                    CMAKE_BUILD_TYPE = 'Debug'
                    QT_VERSION = "5.15.2"
                    QT_MKSPEC = "gcc_64"
                }
                steps {
                    sh 'export'
                    sh 'git submodule deinit -f .'
                    sh 'git clean -ff -x -d .'
                    sh 'git submodule update --init --recursive --force'
                    sh 'mkdir build; cd build; cmake .. -DCMAKE_BUILD_TYPE=Debug -DQDT_BUILD_TESTING=ON'
                    sh 'cd build; make -j`nproc --all`'
                }
                post {
                    cleanup {
                        sh 'git clean -ff -x -d .'
                    }
                }
            }

            stage('Windows build (qmake)') {
                environment {
                    CCACHE_BASEDIR = "${env.WORKSPACE}"
                    CMAKE_BUILD_TYPE = 'Release'
                    QT_VERSION = "5.15.2"
                    QT_MKSPEC = "gcc_64"
                }
                steps {
                    sh 'export'
                    sh 'git submodule deinit -f .'
                    sh 'git clean -ff -x -d .'
                    sh 'git submodule update --init --recursive --force'
                    sh 'qmake ..'
                    sh 'make -j'nproc''
                }
                post {
                    cleanup {
                    sh 'git clean -ff -x -d .'
                    }
                }
            }

            stage('Windows build (cmake)') {
                environment {
                    CCACHE_BASEDIR = "${env.WORKSPACE}"
                    CMAKE_BUILD_TYPE = 'Release'
                    QT_VERSION = "5.15.2"
                    QT_MKSPEC = "gcc_64"
                }
                steps {
                    sh 'export'
                    sh 'git submodule deinit -f .'
                    sh 'git clean -ff -x -d .'
                    sh 'git submodule update --init --recursive --force'
                    sh 'cmake ..'
                    sh 'make -j'nproc''
                }
                post {
                    cleanup {
                    sh 'git clean -ff -x -d .'
                    }
                }
            }
        }
    }
}
